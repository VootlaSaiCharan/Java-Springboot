pipeline{
    agent any

    tools {
        maven 'maven3'
    }

    environment{
        SCANNER_HOME= tool 'sonar-scanner'
    }
    stages{
        stage('git clone'){
            steps{
                git 'https://github.com/VootlaSaiCharan/Java-Springboot.git'
            }
        }
        stage('compile'){
            steps{
                sh 'mvn clean compile'
            }
        }
        stage('test'){
            steps{
                sh 'mvn test -DskipTest=True'
            }
        }
        stage('sonarqube'){
            steps{
                withSonarQubeEnv('sonar') {
                    sh ''' $SCANNER_HOME/bin/sonar-scanner -Dsonar.projectKey=Java-Springboot -Dsonar.projectName=Java-Springboot \
                    -Dsonar.java.binaries=. '''
                }
            }
        }
        stage('package'){
            steps{
                sh 'mvn install'
            }
        }
        stage('docker build'){
            steps{
                script{
                    withDockerRegistry(credentialsId: 'docker-cred') {
                        sh 'docker build -t javaspringboot .'
                    }
                }
            }
        }
        stage('trivy'){
            steps{
                script{
                    sh 'trivy image --severity LOW,MODERATE,HIGH,CRITICAL javaspringboot:latest'
                }
            }
        }
        stage('docker run'){
            steps{
                script{
                    withDockerRegistry(credentialsId: 'docker-cred') {
                        sh 'docker run -d -it --name cont_javaspringboot -p 7000:8080 javaspringboot'  
                    }
                }
            }
        }
        stage('docker push'){
            steps{
                script{
                    withDockerRegistry(credentialsId: 'docker-cred') {
                        sh 'docker tag javaspringboot vootlasaicharan/javaspringboot:v1'
                        sh  'docker push vootlasaicharan/javaspringboot:v1'
                    }
                }
            }
        }
    }
    post {
        // Always send an email after the pipeline runs
        always {
            script {
                emailext(
                    subject: "Jenkins Build Notification - ${currentBuild.fullDisplayName}",
                    body: """
                        <h2>Build Notification</h2>
                        <p>Project: ${JOB_NAME}</p>
                        <p>Build Number: ${BUILD_NUMBER}</p>
                        <p>Status: ${currentBuild.currentResult}</p>
                        <p>View build: <a href="${BUILD_URL}">${BUILD_URL}</a></p>
                    """,
                    to: 'charanv369@gmail.com',
                    from: 'jenkins@gmail.com',
                    replyTo: 'jenkins@gmail.com',
                    mimeType: 'text/html' // Comma added before this line
                )
            }
        }
    }
}