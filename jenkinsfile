def COLOR_MAP = [
    'SUCCESS': 'good',
    'FAILURE': 'danger'
    ]
pipeline {
    agent any
     environment {
        SCANNER_HOME = tool 'sonarqube'
    }
    stages {
        stage('git checkout') {
            steps {
             git 'https://github.com/vootlasaicharan/Java-Springboot.git'
            }
        }
         stage('compile') {
            steps {
              sh 'mvn compile'
            }
        }
        //  stage('code analysis') {
        //     steps {
        //       withSonarQubeEnv('sonar-server') {
        //        sh ''' $SCANNER_HOME/bin/sonar-scanner -Dsonar.projectName=Java-Springboot \
        //        -Dsonar.java.binaries=. \
        //        -Dsonar.projectKey=Java-Springboot'''
        //       }
        //     }
        // }
        stage('package') {
            steps {
              sh 'mvn install'
            }
        }
         stage('docker build') {
            steps {
             script {
                withCredentials([usernamePassword(
                    credentialsId: "docker"
                    usernameVariable: "USER"
                    passwordVariable: "PASSWORD"
                )])
                // build docker image
                sh 'docker build -t ${USER}/java:01 .'
              }
            }
        }
         stage('docker push') {
            steps {
                script {
                    withCredentials([usernamePassword(
                        credentialsId: "docker"
                        usernameVariable: "USER"
                        passwordVariable: "PASSWORD"
                    )]){
                        sh 'echo ${DOCKERHUB_PASS} | docker login -u $USER -p $PASSWORD'
                        // push docker image
                        sh 'docker push ${USER}/java:01'
                    }
                }
            }
        }    
        stage('docker container') {
            steps {
                script {
                    withCredentials([usernamePassword(
                        credentialsId: "docker"
                        usernameVariable: "USER"
                        passwordVariable: "PASSWORD"
                    )]) {
                        sh 'docker run -itd --name java-container -p 57:8080 ${USER}/java:01'
                    }
                }
            }
        }
        stage('docker compose') {
            steps {
                script {
                    withCredentials([usernamePassword(
                        credentialsId: "docker"
                        usernameVariable: "USER"
                        passwordVariable: "PASSWORD"
                    )]){
                        sh 'docker-compose up -d'
                    }
                }
            }
        }
    }
}
